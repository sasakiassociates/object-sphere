type Query {
  getObject(id: ID!): SasakiObject
  getPoints(box: Box): [CloudPoint]
}


"A simple object used for Sasaki projects"
interface SasakiObject {
  "The id related to the reference object id"
  id: ID!
  "An optional name for the object"
  name: String
}

"A simple container object that is mainly used for acting as an anchor point for a specific workflow type"
interface SasakiContainer {
  "The id related to the reference object id"
  id: ID!
  "An optional name for the object"
  name: String
  "The items it contains"
  objects: [SasakiObject!]!
}

type Box {
  center: CloudPoint
  xsize: Float
  ysize: Float
  zsize: Float
}

type ViewCloud implements SasakiObject {
  id: ID!
  name: String
  points: [CloudPoint]
}

type NormalCloud implements SasakiObject {
  id: ID!
  name: String
  normals: [NormalPoint]
}

type CloudPoint {
  point: Vector!
  meta: String
}

type NormalPoint {
  point: Point!
  normal: Normal!
  meta: String
}

interface Point implements Vector {
  x: Float!
  y: Float!
  z: Float!
}

interface Normal implements Vector {
  x: Float!
  y: Float!
  z: Float!
}

interface Vector {
  x: Float!
  y: Float!
  z: Float!
}
